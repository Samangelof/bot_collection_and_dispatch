from aiogram.types import (
    InputFile, 
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    ReplyKeyboardRemove
)
from aiogram import types
from aiogram.dispatcher import FSMContext
from database.sqlite_db import DatabaseManager
from bot.utils.send_chat import send_request_to_chat
from bot.states.all_states import UnconfirmedRequestStates
from bot.utils.general import get_manager_name
from bot.utils.logger import log_info


# ========================================================================
# == –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ ==
async def process_unconfirmed_request(message: types.Message, state: FSMContext, db: DatabaseManager):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏."""
    request_data = await state.get_data()
    manager_name = await get_manager_name(request_data.get('manager_id'), db)
    
    await state.update_data(
        manager_name=manager_name,
        procedure_name=request_data.get('procedure_name'),
        procedure_date=request_data.get('procedure_date'),
        procedure_time=request_data.get('procedure_time')
    )

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–†—É—Å—Å–∫–∏–π"), KeyboardButton("“ö–∞–∑–∞“õ—à–∞"))
    keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=keyboard
    )
    await UnconfirmedRequestStates.WAITING_FOR_LANGUAGE_CHOICE.set()

# ========================================================================
# == –í—ã–±–æ—Ä —è–∑—ã–∫–∞ ==
async def process_language_choice(message: types.Message, state: FSMContext, db: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if message.text == "–ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è"))
        keyboard.add(KeyboardButton("–ù–µ –≥–æ—Ç–æ–≤–∞—è"))
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:",
            reply_markup=keyboard
        )
        await state.finish()
        return

    await state.update_data(language=message.text)
    
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–î–∞"))
    keyboard.add(KeyboardButton("–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"))
    keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))

    if message.text == "–†—É—Å—Å–∫–∏–π":
        clarification_text = (
            "–Ø –≤–∏–∂—É, —á—Ç–æ –≤—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–µ–π —É—Å–ª—É–≥–æ–π, –Ω–æ –∑–∞–ø–∏—Å—å –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
            "–í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–æ–º–Ω–µ–Ω–∏—è? –ë—É–¥—É —Ä–∞–¥(–∞) –ø–æ–º–æ—á—å."
        )
    else:  # –ö–∞–∑–∞—Ö—Å–∫–∏–π
        clarification_text = (
            "–°—ñ–∑–¥—ñ“£ –±—ñ–∑–¥—ñ“£ “õ—ã–∑–º–µ—Ç—ñ–º—ñ–∑–≥–µ “õ—ã–∑—ã“ì—É—à—ã–ª—ã“õ —Ç–∞–Ω—ã—Ç“õ–∞–Ω—ã“£—ã–∑–¥—ã, "
            "–±—ñ—Ä–∞“õ –∂–∞–∑–±–∞ –∞—è“õ—Ç–∞–ª–º–∞“ì–∞–Ω—ã–Ω –∫”©—Ä—ñ–ø —Ç“±—Ä–º—ã–Ω. –ú“Ø–º–∫—ñ–Ω —Å—ñ–∑–¥–µ —Å“±—Ä–∞“õ—Ç–∞—Ä –Ω–µ–º–µ—Å–µ –∫“Ø–º”ô–Ω–¥–∞—Ä –±–∞—Ä —à—ã“ì–∞—Ä? "
            "–ö”©–º–µ–∫—Ç–µ—Å—É–≥–µ “õ—É–∞–Ω—ã—à—Ç—ã–º—ã–Ω."
        )

    await message.answer(
        f"üí° –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:\n\n{clarification_text}",
        reply_markup=keyboard
    )
    await UnconfirmedRequestStates.WAITING_FOR_INITIAL_RESPONSE.set()

async def process_initial_response(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    if message.text == "–ù–∞–∑–∞–¥":
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–†—É—Å—Å–∫–∏–π"), KeyboardButton("“ö–∞–∑–∞“õ—à–∞"))
        keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=keyboard
        )
        await UnconfirmedRequestStates.WAITING_FOR_LANGUAGE_CHOICE.set()
        return

    data = await state.get_data()
    language = data.get('language')
    
    if message.text == "–î–∞": 
        if language == "–†—É—Å—Å–∫–∏–π":
            response = (
                "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –≠—Ç–æ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º —Å–ø–∞ –∏ —É–≤–∏–¥–µ—Ç—å, "
                "–∫–∞–∫ –Ω–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –º–µ—Ç–æ–¥–∏–∫–∞ —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å."
            )
        else:
            response = (
                "–ö–µ—Ä–µ–º–µ—Ç! –ë“±–ª –±—ñ–∑–¥—ñ“£ —Å–ø–∞–º–µ–Ω —Ç–∞–Ω—ã—Å—É –∂”ô–Ω–µ –±—ñ–∑–¥—ñ“£ —Ç–µ—Ä—ñ–≥–µ –∫“Ø—Ç—ñ–º –∂–∞—Å–∞—É–¥—ã“£ –±—ñ—Ä–µ–≥–µ–π "
                "”ô–¥—ñ—Å—Ç–µ–º–µ—Å—ñ —Å—ñ–∑ “Ø—à—ñ–Ω “õ–∞–ª–∞–π –∂“±–º—ã—Å —ñ—Å—Ç–µ–π—Ç—ñ–Ω—ñ–Ω –∫”©—Ä—É –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ –±–æ–ª–∞–¥—ã."
            )

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–î–∞"))
        keyboard.add(KeyboardButton("–ù–µ—Ç"))
        keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))
        
        await message.answer(
            f"üí° –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:\n\n{response}",
            reply_markup=keyboard
        )
        await UnconfirmedRequestStates.WAITING_FOR_FINAL_CONFIRMATION.set()
        
    else:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–í–æ–ø—Ä–æ—Å—ã –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ—Å—Ç–∏"))
        keyboard.add(KeyboardButton("–û—Ç–∫–∞–∑ –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–∏"))
        keyboard.add(KeyboardButton("–°–∫–µ–ø—Å–∏—Å –∏–ª–∏ –Ω–µ–¥–æ–≤–µ—Ä–∏–µ"))
        keyboard.add(KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞"))
        keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))
        
        await message.answer( 
            "‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=keyboard
        )
        await UnconfirmedRequestStates.WAITING_FOR_OBJECTION_RESPONSE.set()

async def process_objection_response(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞"""
    if message.text == "–ù–∞–∑–∞–¥":
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–î–∞"))
        keyboard.add(KeyboardButton("–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"))
        keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))
        
        data = await state.get_data()
        language = data.get('language')
        
        if language == "–†—É—Å—Å–∫–∏–π":
            clarification_text = (
                "–Ø –≤–∏–∂—É, —á—Ç–æ –≤—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–µ–π —É—Å–ª—É–≥–æ–π, –Ω–æ –∑–∞–ø–∏—Å—å –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
                "–í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–æ–º–Ω–µ–Ω–∏—è? –ë—É–¥—É —Ä–∞–¥(–∞) –ø–æ–º–æ—á—å."
            )
        else:
            clarification_text = (
                "–°—ñ–∑–¥—ñ“£ –±—ñ–∑–¥—ñ“£ “õ—ã–∑–º–µ—Ç—ñ–º—ñ–∑–≥–µ “õ—ã–∑—ã“ì—É—à—ã–ª—ã“õ —Ç–∞–Ω—ã—Ç“õ–∞–Ω—ã“£—ã–∑–¥—ã, "
                "–±—ñ—Ä–∞“õ –∂–∞–∑–±–∞ –∞—è“õ—Ç–∞–ª–º–∞“ì–∞–Ω—ã–Ω –∫”©—Ä—ñ–ø —Ç“±—Ä–º—ã–Ω. –ú“Ø–º–∫—ñ–Ω —Å—ñ–∑–¥–µ —Å“±—Ä–∞“õ—Ç–∞—Ä –Ω–µ–º–µ—Å–µ –∫“Ø–º”ô–Ω–¥–∞—Ä –±–∞—Ä —à—ã“ì–∞—Ä? "
                "–ö”©–º–µ–∫—Ç–µ—Å—É–≥–µ “õ—É–∞–Ω—ã—à—Ç—ã–º—ã–Ω."
            )
            
        await message.answer(
            f"üí° –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:\n\n{clarification_text}",
            reply_markup=keyboard
        )
        await UnconfirmedRequestStates.WAITING_FOR_INITIAL_RESPONSE.set()
        return

    data = await state.get_data()
    language = data.get('language')

    if message.text == "–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞": 
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))
        await message.answer(
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=keyboard
        )
        await UnconfirmedRequestStates.WAITING_FOR_REJECTION_REASON.set()
        return

    response = ""
    if language == "–†—É—Å—Å–∫–∏–π":
        if message.text == "–í–æ–ø—Ä–æ—Å—ã –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ—Å—Ç–∏":
            response = (
                "–î–∞, —ç—Ç–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–∞. "
                "–ú—ã —Ö–æ—Ç–∏–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å –≤–∞—Å —Å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å, "
                "–∫–∞–∫ –º—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö."
            )
        elif message.text == "–û—Ç–∫–∞–∑ –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–∏":
            response = (
                "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤–∞—à–µ –≤—Ä–µ–º—è —Ü–µ–Ω–Ω–æ. –ú—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å "
                "–Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ö–∞–∫ –Ω–∞—Å—á–µ—Ç [–î–∞—Ç–∞/–≤—Ä–µ–º—è]?"
            )
        elif message.text == "–°–∫–µ–ø—Å–∏—Å –∏–ª–∏ –Ω–µ–¥–æ–≤–µ—Ä–∏–µ":
            response = (
                "–ù–∞—à —Å–ø–∞ ‚Äì —ç—Ç–æ –ø—Ä–µ–º–∏—É–º-–±—Ä–µ–Ω–¥, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É. "
                "–ú—ã —É–≤–µ—Ä–µ–Ω—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å —É–±–µ–¥–∏—Ç—å—Å—è "
                "–≤ —ç—Ç–æ–º —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
            )
    else:  # –ö–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∑–∞—Ö—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
        pass

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–î–∞"))
    keyboard.add(KeyboardButton("–ù–µ—Ç"))
    keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))
    
    await message.answer(
        f"üí° –°–∫—Ä–∏–ø—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ:\n\n{response}",
        reply_markup=keyboard
    )
    await UnconfirmedRequestStates.WAITING_FOR_FINAL_CONFIRMATION.set()

# ========================================================================
# == –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ==
async def process_final_confirmation(message: types.Message, state: FSMContext, db: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    if message.text == "–ù–∞–∑–∞–¥":
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–í–æ–ø—Ä–æ—Å—ã –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ—Å—Ç–∏"))
        keyboard.add(KeyboardButton("–û—Ç–∫–∞–∑ –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–∏"))
        keyboard.add(KeyboardButton("–°–∫–µ–ø—Å–∏—Å –∏–ª–∏ –Ω–µ–¥–æ–≤–µ—Ä–∏–µ"))
        keyboard.add(KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞"))
        keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))
        
        await message.answer(
            "‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=keyboard
        )
        await UnconfirmedRequestStates.WAITING_FOR_OBJECTION_RESPONSE.set()
        return

    data = await state.get_data()
    language = data.get('language')
    procedure_date = data.get('procedure_date')
    procedure_time = data.get('procedure_time')

    if message.text == "–î–∞":
        if language == "–†—É—Å—Å–∫–∏–π":
            response = (
                f"–ë—É–¥—É —Ä–∞–¥(–∞) –≤–∞—Å –≤–∏–¥–µ—Ç—å! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {procedure_date} –≤ {procedure_time}. "
                "–ù–µ –∑–∞–±—É–¥—å—Ç–µ, —á—Ç–æ –Ω–∞—à–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–æ–¥–∞—Ä–∏—Ç –≤–∞–º –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–æ–ª–Ω–æ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ. "
                "–ñ–¥–µ–º –≤–∞—Å –≤ Kedma Luxury Spa!"
            )
        else:
            # –ö–∞–∑–∞—Ö—Å–∫–∞—è –≤–µ—Ä—Å–∏—è
            pass


        request_data = await state.get_data()
        db.update_request(
            request_id=request_data.get("request_id"),
            salon=request_data.get("salon_name"),
            request_type=request_data.get("request_type"),
            client_name=request_data.get("client_name"),
            client_age=request_data.get("client_age"),
            procedure_name=request_data.get("procedure_name"),
            procedure_date=request_data.get("procedure_date"),
            procedure_time=request_data.get("procedure_time"),
            client_phone=request_data.get("client_phone"),
            rejection_reason=request_data.get("rejection_reason")
        )

        await send_request_to_chat(request_data, db)

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"))
        
        await message.answer(
            f"‚úÖ –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:\n\n{response}",
            reply_markup=keyboard
        )
        await state.finish()
    elif message.text == '–ù–µ—Ç':
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–í–æ–ø—Ä–æ—Å—ã –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ—Å—Ç–∏"))
        keyboard.add(KeyboardButton("–û—Ç–∫–∞–∑ –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–∏"))
        keyboard.add(KeyboardButton("–°–∫–µ–ø—Å–∏—Å –∏–ª–∏ –Ω–µ–¥–æ–≤–µ—Ä–∏–µ"))
        keyboard.add(KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞"))
        keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=keyboard
        )
        await UnconfirmedRequestStates.WAITING_FOR_OBJECTION_RESPONSE.set()


# ========================================================================
# == –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ ==
async def process_rejection_reason(message: types.Message, state: FSMContext, db: DatabaseManager):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞"""
    if message.text == "–ù–∞–∑–∞–¥":
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–í–æ–ø—Ä–æ—Å—ã –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ—Å—Ç–∏"))
        keyboard.add(KeyboardButton("–û—Ç–∫–∞–∑ –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–∏"))
        keyboard.add(KeyboardButton("–°–∫–µ–ø—Å–∏—Å –∏–ª–∏ –Ω–µ–¥–æ–≤–µ—Ä–∏–µ"))
        keyboard.add(KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞"))
        keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))
        
        await message.answer(
            "‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=keyboard
        )
        await UnconfirmedRequestStates.WAITING_FOR_OBJECTION_RESPONSE.set()
        return

    rejection_reason = message.text
    await state.update_data(rejection_reason=rejection_reason)
    

    request_data = await state.get_data()
    db.update_request(
        request_id=request_data.get("request_id"),
        salon=request_data.get("salon_name"),
        request_type=request_data.get("request_type"),
        client_name=request_data.get("client_name"),
        client_age=request_data.get("client_age"),
        procedure_name=request_data.get("procedure_name"),
        procedure_date=request_data.get("procedure_date"),
        procedure_time=request_data.get("procedure_time"),
        client_phone=request_data.get("client_phone"),
        rejection_reason=request_data.get("rejection_reason")
    )
    await send_request_to_chat(request_data, db)
    

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"))
    
    await message.answer(
        "‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
        "–ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.",
        reply_markup=keyboard
    )
    await state.finish()