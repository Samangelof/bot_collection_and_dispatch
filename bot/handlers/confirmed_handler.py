from aiogram.types import (
    InputFile, 
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    ReplyKeyboardRemove
)
from aiogram import types
from aiogram.dispatcher import FSMContext
from database.sqlite_db import DatabaseManager
from bot.utils.send_chat import send_request_to_chat
from bot.states.all_states import ConfirmedRequestStates
from bot.utils.general import get_manager_name
from bot.utils.logger import log_info


# ========================================================================
# == –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ ==
async def process_confirmed_request(message: types.Message, state: FSMContext, db: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏."""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    request_data = await state.get_data()
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    manager_name = await get_manager_name(request_data.get('manager_id'), db)
    procedure_name = request_data.get('procedure_name')
    procedure_date = request_data.get('procedure_date')
    procedure_time = request_data.get('procedure_time')
    
    request_text = (
        f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –≠—Ç–æ {manager_name}, –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å Kedma Luxury Spa. "
        f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {procedure_name} —á–µ—Ä–µ–∑ –Ω–∞—à—É —Ä–µ–∫–ª–∞–º—É. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –≤–∞—à—É –∑–∞–ø–∏—Å—å –Ω–∞ {procedure_date} –≤ {procedure_time}. –í—Å–µ –≤–µ—Ä–Ω–æ?"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç"
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–î–∞"))
    keyboard.add(KeyboardButton("–ù–µ—Ç"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(request_text, reply_markup=keyboard)

    # # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    await ConfirmedRequestStates.WAITING_FOR_CONFIRMATION_ANSWER.set()


# ========================================================================
# == –û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ==
async def process_confirmation_answer(message: types.Message, state: FSMContext, db: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏."""

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–î–∞"))
    keyboard.add(KeyboardButton("–ù–µ—Ç"))
    keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))

    #? == –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ==
    if message.text == "–î–∞":
        request_data = await state.get_data()
        procedure_date = request_data.get('procedure_date')
        procedure_time = request_data.get('procedure_time')

        confirmation_text = (
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å! –ú—ã –∂–¥–µ–º –≤–∞—Å {procedure_date} –≤ {procedure_time}. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–¥–µ—Ç–µ –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–Ω—å—à–µ, —á—Ç–æ–±—ã –º—ã —É—Å–ø–µ–ª–∏ –≤—Å–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ Kedma Luxury Spa!"
        )
        await message.answer(confirmation_text, reply_markup=keyboard)


        new_req_for_manager = (
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ {procedure_date} –≤ {procedure_time}.\n"
            "–ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞'"
        )
        
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"))
        await message.answer(new_req_for_manager, reply_markup=keyboard)
        await state.finish()


    #? == –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ==

    elif message.text == "–ù–µ—Ç":
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–¶–µ–Ω–∞"))
        keyboard.add(KeyboardButton("–í—Ä–µ–º—è"))
        keyboard.add(KeyboardButton("–û–±—â–∞—è –ø–æ–ª—å–∑–∞"))
        keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))
        
        await message.answer(
            "‚ùó –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞–ª—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –æ—Ç–≤–µ—Ç–∞:",
            reply_markup=keyboard
        )
        await ConfirmedRequestStates.WAITING_FOR_CLARIFICATION.set()

    elif message.text == "–ù–∞–∑–∞–¥":
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–î–∞"))
        keyboard.add(KeyboardButton("–ù–µ—Ç"))
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–ø–∏—Å—å.", reply_markup=keyboard)
        await ConfirmedRequestStates.WAITING_FOR_CONFIRMATION_ANSWER.set()


async def process_clarification(message: types.Message, state: FSMContext):
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å–∫—Ä–∏–ø—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    
    if message.text == "–¶–µ–Ω–∞":
        response = (
            "üí° –°–∫—Ä–∏–ø—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ:\n\n"
            "–î–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–±–æ–ª—å—à–∞—è, –Ω–æ –æ–Ω–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –æ—â—É—Ç–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ "
            "–Ω–∞—à–∏—Ö —É—Å–ª—É–≥ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Ö–æ–¥–∞. –ü–æ—Å–ª–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –º—ã —Å–º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º "
            "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —É—Ö–æ–¥–∞, —á—Ç–æ–±—ã –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
        )
    
    elif message.text == "–í—Ä–µ–º—è":
        response = (
            "üí° –°–∫—Ä–∏–ø—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:\n\n"
            "–ú—ã –º–æ–∂–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è. –ö–∞–∫ –Ω–∞—Å—á–µ—Ç [–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è]?"
        )
    
    elif message.text == "–û–±—â–∞—è –ø–æ–ª—å–∑–∞":
        response = (
            "üí° –°–∫—Ä–∏–ø—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –æ –ø–æ–ª—å–∑–µ:\n\n"
            "–≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —à–∞–Ω—Å –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞—à—É —É—Å–ª—É–≥—É, –Ω–æ –∏ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ "
            "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º. –ú–Ω–æ–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫ –Ω–∞–º, "
            "—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫—É—Ä—Å —É—Ö–æ–¥–∞."
        )
    
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞"))
    keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))

    await message.answer(
        f"{response}\n\n"
        "–ü–æ—Å–ª–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await ConfirmedRequestStates.WAITING_FOR_FINAL_DECISION.set()

async def process_final_decision(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    
    if message.text == "–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞":
        await message.answer(
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        await ConfirmedRequestStates.WAITING_FOR_REJECTION_REASON.set()
    
    elif message.text == "–ù–∞–∑–∞–¥":
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("–¶–µ–Ω–∞"))
        keyboard.add(KeyboardButton("–í—Ä–µ–º—è"))
        keyboard.add(KeyboardButton("–û–±—â–∞—è –ø–æ–ª—å–∑–∞"))
        keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥"))
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=keyboard
        )
        await ConfirmedRequestStates.WAITING_FOR_CLARIFICATION.set()

async def process_rejection_reason(message: types.Message, state: FSMContext, db: DatabaseManager):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞"""
    rejection_reason = message.text
    
    await state.update_data(rejection_reason=rejection_reason)
    data = await state.get_data()
    log_info(f'[FINAL] process_rejection_reason={data}')
    
    request_data = await state.get_data()


    db.update_request(
        request_id=request_data.get("request_id"),
        salon=request_data.get("salon_name"),
        request_type=request_data.get("request_type"),
        client_name=request_data.get("client_name"),
        client_age=request_data.get("client_age"),
        procedure_name=request_data.get("procedure_name"),
        procedure_date=request_data.get("procedure_date"),
        procedure_time=request_data.get("procedure_time"),
        client_phone=request_data.get("client_phone"),
        rejection_reason=request_data.get("rejection_reason")
    )

    await send_request_to_chat(request_data, db)
    
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"))
    
    await message.answer(
        "‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
        "–ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.",
        reply_markup=keyboard
    )
    
    await state.finish()